


ARM Macro Assembler    Page 1 


    1 00000000         ;THE SOLUTION OF LAB3 QUESTION #3
    2 00000000         
    3 00000000                 AREA             MyData, DATA, READWRITE
    4 00000000         
    5 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       mem_block
                               SPACE            100         ; A suitable block 
                                                            of memory in data a
                                                            rea
    6 00000064         
    7 00000064                 AREA             Loadcon, CODE, READONLY
    8 00000000         
    9 00000000                 ENTRY                        ; Mark first instru
                                                            ction to execute
   10 00000000         
   11 00000000         Start
   12 00000000 EB00000A        BL               MAIN        ; Branch to first s
                                                            ubroutine 
   13 00000004         Stop
   14 00000004 E3A09018        MOV              R9, #0x18   ; angel_SWIreason_R
                                                            eportException
   15 00000008 E59FA12C        LDR              R10, =0x20026 ; ADP_Stopped_App
                                                            licationExit
   16 0000000C EF123456        SVC              #0x123456   ; ARM semihosting (
                                                            formerly SWI)
   17 00000010         
   18 00000010         ; The literal pool with 8 constants



ARM Macro Assembler    Page 2 


   19 00000010         
   20 00000010 00000064 
              00000050 
              00000032 
              00000028 
              0000001D 
              00000014 
              0000000A 
              00000009 literal_list
                               DCD              100, 80, 50, 40, 29, 20, 10, 9
   21 00000030         
   22 00000030         MAIN
   23 00000030         
   24 00000030 E59F0108        LDR              R0, =literal_list ; The address
                                                             of a 1st element o
                                                            f the literal pool 
                                                            is loaded into R0 
   25 00000034 E3A01000        LDR              R1, =0      ; Counter Register 
                                                            to get each literal
                                                            _list value  
   26 00000038         
   27 00000038         ; Loading the values to registers
   28 00000038         
   29 00000038 E7902101        LDR              R2, [R0, R1, LSL #2] ; Loads th
                                                            e 1st element of th
                                                            e literal pool into
                                                             R2
   30 0000003C E2811001        ADD              R1, R1, #1  ; Increments the Co
                                                            unter Register (R1)
                                                             by 1 
   31 00000040 E7903101        LDR              R3, [R0, R1, LSL #2] ; Loads th
                                                            e 2nd element of th
                                                            e literal pool into
                                                             R3
   32 00000044         
   33 00000044 E1520003        CMP              R2, R3      ; Compares the valu
                                                            e of the 1st elemen
                                                            t to the 2nd elemen
                                                            t
   34 00000048 9A000000        BLS              ASCENDING   ; If R2 <= R3, it j
                                                            umps to ascending
   35 0000004C 8A00000B        BHI              DESCENDING  ; If R2 > R3, it ju
                                                            mps to descending
   36 00000050         
   37 00000050         ; If the sequence is an increasing one, the program comp
                       utes the mean value
   38 00000050         
   39 00000050         ASCENDING
   40 00000050         
   41 00000050 E0825003        ADD              R5, R2, R3  ; R5 will contain t
                                                            he sum of the liter
                                                            al pool values
   42 00000054 E2811001        ADD              R1, R1, #1  ; Increments the Co
                                                            unter Register (R1)
                                                             by 1 
   43 00000058         
   44 00000058         L1
   45 00000058 E7904101        LDR              R4, [R0, R1, LSL #2] ; A litera
                                                            l pool elements are



ARM Macro Assembler    Page 3 


                                                             loaded into R4 thr
                                                            ough a loop
   46 0000005C         
   47 0000005C E1540003        CMP              R4, R3      ; Compares each con
                                                            secutive values, to
                                                             check the sequence
                                                             is still ascending
                                                            
   48 00000060 3A000020        BLO              NON_MONOTONIC ; The loop branch
                                                            es when an ascendin
                                                            g can't continue
   49 00000064         
   50 00000064         ; Sum the values and put the result on R5
   51 00000064         
   52 00000064 E0855004        ADD              R5, R5, R4  ; Adds each value t
                                                            o R5, inorder to ge
                                                            t the sum of all of
                                                             the literal pool v
                                                            alues
   53 00000068 E1A03004        MOV              R3, R4
   54 0000006C         
   55 0000006C E2811001        ADD              R1, R1, #1
   56 00000070 E3510008        CMP              R1, #8      ; Checks whether th
                                                            e counter reaches t
                                                            o the number of lit
                                                            eral pool elements
   57 00000074 3AFFFFF7        BLO              L1          ; Branch if it is l
                                                            ower
   58 00000078         
   59 00000078         ; Computing the mean (Divide the result of the sum by th
                       e number of elements i.e. 8)
   60 00000078         
   61 00000078 E1A061A5        MOV              R6, R5, LSR #3 ; Shifts R5 righ
                                                            t by 3 bits (divide
                                                             R5 by 8) and put t
                                                            he result in R6
   62 0000007C         
   63 0000007C E12FFF1E        BX               LR          ; Branch and link
   64 00000080         
   65 00000080         ;if the sequence is a decreasing one, the program comput
                       es the largest absolute difference between two consecuti
                       ve numbers
   66 00000080         
   67 00000080         DESCENDING
   68 00000080         
   69 00000080 E59FB0BC        LDR              R11, =mem_block ; The 1st addre
                                                            ss of a mem_block i
                                                            s loaded into R11
   70 00000084 E3A0C000        LDR              R12, =0     ; Counter Register 
                                                            (R12) to access mem
                                                            _block addresses 
   71 00000088         
   72 00000088 E0425003        SUB              R5, R2, R3  ; R5 = R2 - R3
   73 0000008C E78B510C        STR              R5, [R11, R12, LSL #2] ; The di
                                                            fference is stored 
                                                            into the 1st memory
                                                             address
   74 00000090 E2811001        ADD              R1, R1, #1
   75 00000094         



ARM Macro Assembler    Page 4 


   76 00000094         L2
   77 00000094 E7904101        LDR              R4, [R0, R1, LSL #2] ; A litera
                                                            l pool elements are
                                                             loaded into R4 thr
                                                            ough a loop
   78 00000098         
   79 00000098 E1540003        CMP              R4, R3      ; Compares each con
                                                            secutive values, to
                                                             check the sequence
                                                             is still descendin
                                                            g
   80 0000009C 8A000011        BHI              NON_MONOTONIC ; Branches to NON
                                                            _MONOTONIC if the c
                                                            urrent element is g
                                                            reater than the pre
                                                            vious one 
   81 000000A0         
   82 000000A0 E0435004        SUB              R5, R3, R4  ; Subtracts each co
                                                            nsecutive literal p
                                                            ool elements, R5 = 
                                                            R3 - R4
   83 000000A4 E28CC001        ADD              R12, R12, #1 ; Increments the C
                                                            ounter Register (R1
                                                            2) by 1 
   84 000000A8 E78B510C        STR              R5, [R11, R12, LSL #2] ; The di
                                                            fference is stored 
                                                            into the memory add
                                                            resses of mem_block
                                                            
   85 000000AC         
   86 000000AC E1A03004        MOV              R3, R4      ; Moves R4 to R3
   87 000000B0         
   88 000000B0 E2811001        ADD              R1, R1, #1
   89 000000B4 E3510008        CMP              R1, #8      ; Compares R1 with 
                                                            8
   90 000000B8 3AFFFFF5        BLO              L2          ; Branches to L2 if
                                                             R1 < 8
   91 000000BC         
   92 000000BC E04CC00C        SUB              R12, R12, R12 ; Free R12 inorde
                                                            r to use it in the 
                                                            next task
   93 000000C0 E79B610C        LDR              R6, [R11, R12, LSL #2] ; The 1s
                                                            t element in the me
                                                            m_block is loaded t
                                                            o R6
   94 000000C4 E28CC001        ADD              R12, R12, #1 ; Increments the C
                                                            ounter Register (R1
                                                            2) by 1
   95 000000C8         
   96 000000C8         L3
   97 000000C8 E79B710C        LDR              R7, [R11, R12, LSL #2] ; The 2n
                                                            d element in the me
                                                            m_block is loaded t
                                                            o R7
   98 000000CC         
   99 000000CC         ;At the end R6 will contain the largest difference betwe
                       en any of the two consecutive mem_block values. 
  100 000000CC         
  101 000000CC E1560007        CMP              R6, R7



ARM Macro Assembler    Page 5 


  102 000000D0 2A000000        BHS              NEXT        ; Branch if R6 >= R
                                                            7
  103 000000D4 E1A06007        MOV              R6, R7      ; At the end of thi
                                                            s loop, R6 will con
                                                            tain the largest di
                                                            fference
  104 000000D8         
  105 000000D8         NEXT
  106 000000D8         
  107 000000D8 E28CC001        ADD              R12, R12, #1
  108 000000DC E35C0007        CMP              R12, #7     ; mem_block has 7 v
                                                            alues
  109 000000E0 3AFFFFF8        BLO              L3
  110 000000E4         
  111 000000E4 E12FFF1E        BX               LR
  112 000000E8         
  113 000000E8         ; If the literal pool values are niether ascending nor d
                       escending, this block of code will be executed 
  114 000000E8         
  115 000000E8         NON_MONOTONIC
  116 000000E8         
  117 000000E8         ; This is to find the maximum value of the literal_list
  118 000000E8         
  119 000000E8 E0411001        SUB              R1, R1, R1  ; Free the counter 
                                                            register of literal
                                                            _list    
  120 000000EC E7902101        LDR              R2, [R0, R1, LSL #2] ; Loads th
                                                            e 1st element of th
                                                            e literal_list to R
                                                            2
  121 000000F0 E2811001        ADD              R1, R1, #1
  122 000000F4         
  123 000000F4         L4
  124 000000F4 E7903101        LDR              R3, [R0, R1, LSL #2]
  125 000000F8         
  126 000000F8 E1520003        CMP              R2, R3
  127 000000FC 2A000000        BHS              NEXT1
  128 00000100 E1A02003        MOV              R2, R3      ; At the end of thi
                                                            s loop, R2 will con
                                                            tain the maximum va
                                                            lue
  129 00000104         
  130 00000104         NEXT1
  131 00000104         
  132 00000104 E2811001        ADD              R1, R1, #1
  133 00000108 E3510008        CMP              R1, #8
  134 0000010C 3AFFFFF8        BLO              L4
  135 00000110         
  136 00000110         ; This is to find the minimum value of the literal_list
  137 00000110         
  138 00000110 E0411001        SUB              R1, R1, R1
  139 00000114 E7904101        LDR              R4, [R0, R1, LSL #2]
  140 00000118 E2811001        ADD              R1, R1, #1
  141 0000011C         
  142 0000011C         L5
  143 0000011C E7905101        LDR              R5, [R0, R1, LSL #2]
  144 00000120         
  145 00000120 E1540005        CMP              R4, R5
  146 00000124 9A000000        BLS              NEXT2



ARM Macro Assembler    Page 6 


  147 00000128 E1A04005        MOV              R4, R5      ; At the end of thi
                                                            s loop, R4 will con
                                                            tain the minimum va
                                                            lue
  148 0000012C         
  149 0000012C         NEXT2
  150 0000012C         
  151 0000012C E2811001        ADD              R1, R1, #1
  152 00000130 E3510008        CMP              R1, #8
  153 00000134 3AFFFFF8        BLO              L5
  154 00000138         
  155 00000138 E12FFF1E        BX               LR
  156 0000013C         
  157 0000013C                 END
              00020026 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=.\q3.d -o.\q3.o -IC:\Kei
l\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --predefin
e="__EVAL SETA 1" --list=.\q3.lst Q3.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 3 in file Q3.s
   Uses
      None
Comment: MyData unused
mem_block 00000000

Symbol: mem_block
   Definitions
      At line 5 in file Q3.s
   Uses
      At line 69 in file Q3.s
Comment: mem_block used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASCENDING 00000050

Symbol: ASCENDING
   Definitions
      At line 39 in file Q3.s
   Uses
      At line 34 in file Q3.s
Comment: ASCENDING used once
DESCENDING 00000080

Symbol: DESCENDING
   Definitions
      At line 67 in file Q3.s
   Uses
      At line 35 in file Q3.s
Comment: DESCENDING used once
L1 00000058

Symbol: L1
   Definitions
      At line 44 in file Q3.s
   Uses
      At line 57 in file Q3.s
Comment: L1 used once
L2 00000094

Symbol: L2
   Definitions
      At line 76 in file Q3.s
   Uses
      At line 90 in file Q3.s
Comment: L2 used once
L3 000000C8

Symbol: L3
   Definitions
      At line 96 in file Q3.s
   Uses
      At line 109 in file Q3.s
Comment: L3 used once
L4 000000F4

Symbol: L4
   Definitions
      At line 123 in file Q3.s
   Uses
      At line 134 in file Q3.s
Comment: L4 used once
L5 0000011C

Symbol: L5
   Definitions
      At line 142 in file Q3.s
   Uses
      At line 153 in file Q3.s
Comment: L5 used once
Loadcon 00000000

Symbol: Loadcon



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 7 in file Q3.s
   Uses
      None
Comment: Loadcon unused
MAIN 00000030

Symbol: MAIN
   Definitions
      At line 22 in file Q3.s
   Uses
      At line 12 in file Q3.s
Comment: MAIN used once
NEXT 000000D8

Symbol: NEXT
   Definitions
      At line 105 in file Q3.s
   Uses
      At line 102 in file Q3.s
Comment: NEXT used once
NEXT1 00000104

Symbol: NEXT1
   Definitions
      At line 130 in file Q3.s
   Uses
      At line 127 in file Q3.s
Comment: NEXT1 used once
NEXT2 0000012C

Symbol: NEXT2
   Definitions
      At line 149 in file Q3.s
   Uses
      At line 146 in file Q3.s
Comment: NEXT2 used once
NON_MONOTONIC 000000E8

Symbol: NON_MONOTONIC
   Definitions
      At line 115 in file Q3.s
   Uses
      At line 48 in file Q3.s
      At line 80 in file Q3.s

Start 00000000

Symbol: Start
   Definitions
      At line 11 in file Q3.s
   Uses
      None
Comment: Start unused
Stop 00000004

Symbol: Stop
   Definitions
      At line 13 in file Q3.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: Stop unused
literal_list 00000010

Symbol: literal_list
   Definitions
      At line 20 in file Q3.s
   Uses
      At line 24 in file Q3.s
Comment: literal_list used once
16 symbols
351 symbols in table
