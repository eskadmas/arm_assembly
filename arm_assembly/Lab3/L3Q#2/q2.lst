


ARM Macro Assembler    Page 1 


    1 00000000         ; THE SOLUTION OF LAB 3 QUESTION #2
    2 00000000         
    3 00000000                 AREA             sortconst, CODE, READONLY
    4 00000000         
    5 00000000         ; Name this block of code as sortconst   
    6 00000000                 ENTRY                        ; Mark first instru
                                                            ction to execute
    7 00000000         
    8 00000000         Start
    9 00000000 EB000003        BL               Main        ; Branch to first s
                                                            ubroutine
   10 00000004 EB00001D        BL               FinalTask   ; Branch to second 
                                                            subroutine
   11 00000008         
   12 00000008         Stop
   13 00000008 E3A0B018        MOV              R11, #0x18  ; angel_SWIreason_R
                                                            eportException
   14 0000000C E59FC098        LDR              R12, =0x20026 ; ADP_Stopped_App
                                                            licationExit
   15 00000010 EF123456        SVC              #0x123456   ; ARM semihosting (
                                                            formerly SWI)
   16 00000014         
   17 00000014         Main
   18 00000014         
   19 00000014         ; It initializes registers R0-R2 with immediate values
   20 00000014         
   21 00000014 E3A00032        MOV              R0, #50     ; Set up parameters
                                                            
   22 00000018 E3A01023        MOV              R1, #35
   23 0000001C E3A0200A        MOV              R2, #10
   24 00000020 E3A04000        MOV              R4, #0
   25 00000024 E3A05000        MOV              R5, #0
   26 00000028         
   27 00000028         ; It sorts registers; at the end R0 will contain the sma
                       llest value and R2 will contain the biggest one
   28 00000028         
   29 00000028 E1500001        CMP              R0, R1
   30 0000002C 8A000000        BHI              Higher1
   31 00000030 EA000003        B                Next
   32 00000034         
   33 00000034         Higher1
   34 00000034 E1A03000        MOV              R3, R0
   35 00000038 E1A00001        MOV              R0, R1
   36 0000003C E1A01003        MOV              R1, R3
   37 00000040 E0433003        SUB              R3, R3, R3
   38 00000044         
   39 00000044         Next
   40 00000044 E1510002        CMP              R1, R2
   41 00000048 8A000000        BHI              Higher2
   42 0000004C EA000003        B                Next1
   43 00000050         
   44 00000050         Higher2
   45 00000050 E1A03001        MOV              R3, R1
   46 00000054 E1A01002        MOV              R1, R2
   47 00000058 E1A02003        MOV              R2, R3
   48 0000005C E0433003        SUB              R3, R3, R3
   49 00000060         
   50 00000060         Next1
   51 00000060 E1500001        CMP              R0, R1



ARM Macro Assembler    Page 2 


   52 00000064 8A000000        BHI              Higher3
   53 00000068 E12FFF1E        BX               LR
   54 0000006C         
   55 0000006C         Higher3
   56 0000006C E1A03000        MOV              R3, R0
   57 00000070 E1A00001        MOV              R0, R1
   58 00000074 E1A01003        MOV              R1, R3
   59 00000078 E0433003        SUB              R3, R3, R3
   60 0000007C E12FFF1E        BX               LR
   61 00000080         
   62 00000080         FinalTask
   63 00000080         ;This part of the code enables to check whether the two 
                       biggest elements are multipliers of the smallest one.
   64 00000080         
   65 00000080         ;MOV R6, #35 :MOD: 10 ; R6 will contain the remainder
   66 00000080         ;CMP R6, #0
   67 00000080         ;BEQ Division1
   68 00000080         ;BHI Next2
   69 00000080         
   70 00000080         Division1
   71 00000080         
   72 00000080 E1A06001        MOV              R6, R1
   73 00000084         
   74 00000084         ; This portion of code enables to divide R6 by R0 and th
                       e quetient will be on R4 
   75 00000084         L1
   76 00000084 E0566000        SUBS             R6, R6, R0  ;subtract R0 from R
                                                            6 and store result 
                                                            back in R6 setting 
                                                            flags 
   77 00000088 E2844001        ADD              R4, R4, #1  ;add 1 to counter (
                                                            R4), NOT setting fl
                                                            ags
   78 0000008C E1560000        CMP              R6, R0
   79 00000090 2AFFFFFB        BHS              L1          ;branch to start of
                                                             loop on condition 
                                                            when R6 is still gr
                                                            eater than or equal
                                                             to R0.
   80 00000094         
   81 00000094         Division2
   82 00000094         
   83 00000094 E1A07002        MOV              R7, R2
   84 00000098         
   85 00000098         ; This portion of code enables to divide R7 by R0 and th
                       e quetient will be on R5 while the remainder stays on R7
                       
   86 00000098         L2
   87 00000098 E0577000        SUBS             R7, R7, R0  ;subtracts R0 from 
                                                            R7 and stores resul
                                                            t back in R7 settin
                                                            g flags 
   88 0000009C E2855001        ADD              R5, R5, #1  ;add 1 to counter (
                                                            R5), NOT setting fl
                                                            ags
   89 000000A0 E1570000        CMP              R7, R0
   90 000000A4 2AFFFFFB        BHS              L2          ;branch to start of
                                                             loop on condition 
                                                            when R7 is still gr



ARM Macro Assembler    Page 3 


                                                            eater than or equal
                                                             to R0. 
   91 000000A8         
   92 000000A8 E12FFF1E        BX               LR
   93 000000AC         
   94 000000AC                 END                          ; Mark end of file
              00020026 
Command Line: --debug --xref --apcs=interwork --depend=.\q2.d -o.\q2.o -IC:\Kei
l\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --predefin
e="__EVAL SETA 1" --list=.\q2.lst Q2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Division1 00000080

Symbol: Division1
   Definitions
      At line 70 in file Q2.s
   Uses
      None
Comment: Division1 unused
Division2 00000094

Symbol: Division2
   Definitions
      At line 81 in file Q2.s
   Uses
      None
Comment: Division2 unused
FinalTask 00000080

Symbol: FinalTask
   Definitions
      At line 62 in file Q2.s
   Uses
      At line 10 in file Q2.s
Comment: FinalTask used once
Higher1 00000034

Symbol: Higher1
   Definitions
      At line 33 in file Q2.s
   Uses
      At line 30 in file Q2.s
Comment: Higher1 used once
Higher2 00000050

Symbol: Higher2
   Definitions
      At line 44 in file Q2.s
   Uses
      At line 41 in file Q2.s
Comment: Higher2 used once
Higher3 0000006C

Symbol: Higher3
   Definitions
      At line 55 in file Q2.s
   Uses
      At line 52 in file Q2.s
Comment: Higher3 used once
L1 00000084

Symbol: L1
   Definitions
      At line 75 in file Q2.s
   Uses
      At line 79 in file Q2.s
Comment: L1 used once
L2 00000098

Symbol: L2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 86 in file Q2.s
   Uses
      At line 90 in file Q2.s
Comment: L2 used once
Main 00000014

Symbol: Main
   Definitions
      At line 17 in file Q2.s
   Uses
      At line 9 in file Q2.s
Comment: Main used once
Next 00000044

Symbol: Next
   Definitions
      At line 39 in file Q2.s
   Uses
      At line 31 in file Q2.s
Comment: Next used once
Next1 00000060

Symbol: Next1
   Definitions
      At line 50 in file Q2.s
   Uses
      At line 42 in file Q2.s
Comment: Next1 used once
Start 00000000

Symbol: Start
   Definitions
      At line 8 in file Q2.s
   Uses
      None
Comment: Start unused
Stop 00000008

Symbol: Stop
   Definitions
      At line 12 in file Q2.s
   Uses
      None
Comment: Stop unused
sortconst 00000000

Symbol: sortconst
   Definitions
      At line 3 in file Q2.s
   Uses
      None
Comment: sortconst unused
14 symbols
347 symbols in table
