


ARM Macro Assembler    Page 1 


    1 00000000         ; THE SOLUTION OF LAB 6 QUESTION #1
    2 00000000         
    3 00000000         ;Mode_ABT        EQU     0x17
    4 00000000         
    5 00000000                 AREA             MyData, DATA, READWRITE
    6 00000000         
    7 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00       MEM_B   SPACE            10
    8 0000000A         
    9 0000000A                 AREA             MyCode, CODE, READONLY
   10 00000000         
   11 00000000                 ENTRY
   12 00000000         ;MAP  0xF800, 0xF8FF  READ WRITE  // allow R/W access to
                        IO space
   13 00000000         
   14 00000000         START
   15 00000000         
   16 00000000 EB000013        BL               MAIN
   17 00000004         
   18 00000004         SWI_Handler
   19 00000004 E92D5FFF        STMFD            SP!, {R0-R12, LR}
   20 00000008 E51E9004        LDR              R9, [LR, #-4]
   21 0000000C E3C9A4FF        BIC              R10, R9, #0xff000000
   22 00000010         ; test the identification code of the interrupt
   23 00000010         
   24 00000010 E35A0010        CMP              R10, #0x10
   25 00000014 1A000000        BNE              second_case
   26 00000018         
   27 00000018 E3E06102        MOV              R6, #0x7FFFFFFF
   28 0000001C         
   29 0000001C         second_case
   30 0000001C E35A0020        CMP              R10, #0x20
   31 00000020 1A000000        BNE              end_swi
   32 00000024         
   33 00000024 E3A06102        MOV              R6, #0x80000000
   34 00000028         
   35 00000028         end_swi                              ;LDMFD  SP!, {R0-R1
                                                            2, PC}^
   36 00000028 EA00001F        B                L2
   37 0000002C         
   38 0000002C 00000010 
              70000000 
              FFFFFFE0 
              800000F0 
              100EC023 literal_1
                               DCD              0x10, 0x70000000, 0xFFFFFFE0, 0
x800000F0, 0x100EC023
   39 00000040 00000200 
              12345678 
              E00A1238 
              F0004538 
              E9800348 literal_2
                               DCD              0x200, 0x12345678, 0xE00A1238, 
0xF0004538, 0xE9800348
   40 00000054         
   41 00000054         MAIN
   42 00000054         



ARM Macro Assembler    Page 2 


   43 00000054 E59F0064        LDR              R0, =literal_1 ; The address of
                                                             the 1st literal po
                                                            ol element is loade
                                                            d into R0 
   44 00000058 E59F1064        LDR              R1, =literal_2 ; The address of
                                                             the 2nd literal po
                                                            ol element is loade
                                                            d into R1 
   45 0000005C E59F2064        LDR              R2, =MEM_B  ; The 1st memory ad
                                                            dress to store the 
                                                            sum of the correspo
                                                            nding elements in t
                                                            he two literal pool
                                                            s
   46 00000060 E3A03000        LDR              R3, =0      ; Counter Register
   47 00000064 E3A06000        LDR              R6, =0      ; Result Register
   48 00000068         
   49 00000068         LOOP
   50 00000068         
   51 00000068 E7904103        LDR              R4, [R0, R3, LSL #2] ; The 1st 
                                                            element in the 1st 
                                                            literal pool
   52 0000006C E7915103        LDR              R5, [R1, R3, LSL #2] ; The 1st 
                                                            element in the 2nd 
                                                            literal pool
   53 00000070 E0846005        ADD              R6, R4, R5
   54 00000074         
   55 00000074         ; If R4 and R5 are positive and R6 is negative, set R6 =
                        0x7FFFFFFF 
   56 00000074         
   57 00000074 E3540000        CMP              R4, #0
   58 00000078 4A000004        BMI              L1          ; Branch if R4 is n
                                                            egative 
   59 0000007C E3550000        CMP              R5, #0
   60 00000080 4A000002        BMI              L1          ; Branch if R5 is n
                                                            egative 
   61 00000084 E3560000        CMP              R6, #0
   62 00000088 5A000007        BPL              L2          ; Branch if R6 is p
                                                            ositive or zero - G
                                                            reater than or equa
                                                            l, or unordered
   63 0000008C         
   64 0000008C         ;MOV R6, #0x7FFFFFFF 
   65 0000008C EF000010        SWI              #0x10       ; There is an overf
                                                            low case and this i
                                                            nstruction calls SW
                                                            I to set R6=#0x7FFF
                                                            FFFF 
   66 00000090         
   67 00000090         L1
   68 00000090         ; If R4 and R5 are negative and R6 is possitive, set R6 
                       = 0x80000000
   69 00000090         
   70 00000090 E3540000        CMP              R4, #0
   71 00000094 5A000004        BPL              L2          ; Branch if R4 is p
                                                            ositive or zero
   72 00000098 E3550000        CMP              R5, #0
   73 0000009C 5A000002        BPL              L2          ; Branch if R5 is p
                                                            ositive or zero



ARM Macro Assembler    Page 3 


   74 000000A0         
   75 000000A0 E3560000        CMP              R6, #0
   76 000000A4 4A000000        BMI              L2
   77 000000A8         
   78 000000A8         ;MOV R6, #0x80000000 
   79 000000A8 EF000020        SWI              #0x20       ; There is an overf
                                                            low case and this i
                                                            nstruction calls SW
                                                            I to set R6=#0x8000
                                                            0000 
   80 000000AC         
   81 000000AC         L2
   82 000000AC E7826103        STR              R6, [R2, R3, LSL #2] ; The sum 
                                                            is stored into the 
                                                            1st memory address
   83 000000B0 E2833001        ADD              R3, R3, #1  ; Increment the Cou
                                                            nter Register (R3) 
                                                            by 1
   84 000000B4 E3530005        CMP              R3, #5      ; Increment R3 upto
                                                             the number of lite
                                                            ral pool elements
   85 000000B8 3AFFFFEA        BLO              LOOP        ; The loop continue
                                                            s 
   86 000000BC         
   87 000000BC         ; The following instructions are used to stop the execut
                       ion of the program
   88 000000BC         
   89 000000BC         ;Vectors     LDR     PC, PAbt_Addr   ; prefetch abort
   90 000000BC         
   91 000000BC         ;PAbt_Addr   DCD     PAbt_Handler
   92 000000BC         
   93 000000BC EAFFFFFE 
                       PAbt_Handler
                               B                PAbt_Handler
   94 000000C0         
   95 000000C0                 END                          ; Mark end of file
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=.\q1.d -o.\q1.o -IC:\Kei
l\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --predefin
e="__EVAL SETA 1" --list=.\q1.lst Q1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MEM_B 00000000

Symbol: MEM_B
   Definitions
      At line 7 in file Q1.s
   Uses
      At line 45 in file Q1.s
Comment: MEM_B used once
MyData 00000000

Symbol: MyData
   Definitions
      At line 5 in file Q1.s
   Uses
      None
Comment: MyData unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

L1 00000090

Symbol: L1
   Definitions
      At line 67 in file Q1.s
   Uses
      At line 58 in file Q1.s
      At line 60 in file Q1.s

L2 000000AC

Symbol: L2
   Definitions
      At line 81 in file Q1.s
   Uses
      At line 36 in file Q1.s
      At line 62 in file Q1.s
      At line 71 in file Q1.s
      At line 73 in file Q1.s
      At line 76 in file Q1.s

LOOP 00000068

Symbol: LOOP
   Definitions
      At line 49 in file Q1.s
   Uses
      At line 85 in file Q1.s
Comment: LOOP used once
MAIN 00000054

Symbol: MAIN
   Definitions
      At line 41 in file Q1.s
   Uses
      At line 16 in file Q1.s
Comment: MAIN used once
MyCode 00000000

Symbol: MyCode
   Definitions
      At line 9 in file Q1.s
   Uses
      None
Comment: MyCode unused
PAbt_Handler 000000BC

Symbol: PAbt_Handler
   Definitions
      At line 93 in file Q1.s
   Uses
      At line 93 in file Q1.s
Comment: PAbt_Handler used once
START 00000000

Symbol: START
   Definitions
      At line 14 in file Q1.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: START unused
SWI_Handler 00000004

Symbol: SWI_Handler
   Definitions
      At line 18 in file Q1.s
   Uses
      None
Comment: SWI_Handler unused
end_swi 00000028

Symbol: end_swi
   Definitions
      At line 35 in file Q1.s
   Uses
      At line 31 in file Q1.s
Comment: end_swi used once
literal_1 0000002C

Symbol: literal_1
   Definitions
      At line 38 in file Q1.s
   Uses
      At line 43 in file Q1.s
Comment: literal_1 used once
literal_2 00000040

Symbol: literal_2
   Definitions
      At line 39 in file Q1.s
   Uses
      At line 44 in file Q1.s
Comment: literal_2 used once
second_case 0000001C

Symbol: second_case
   Definitions
      At line 29 in file Q1.s
   Uses
      At line 25 in file Q1.s
Comment: second_case used once
12 symbols
347 symbols in table
